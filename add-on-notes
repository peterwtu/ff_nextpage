* recent firefox version and Gecko version
Gecko & firefox version compare
https://developer.mozilla.org/en/Gecko
also: http://en.wikipedia.org/wiki/History_of_Firefox

| Firefox | Gecko |
|---------+-------|
|       3 |   1.9 |
|     3.5 | 1.9.1 |
|     3.6 | 1.9.2 |
|    3.7a | 1.9.3 |
|       4 |   2.0 |
|         |       |

* built-in functions
** base64
   atob
   btoa
** md5/sha1
   Hashes can be computed using nsICryptoHash
* built-in function in globalOverlay.js
** BrowserOpenExtensions('extensions'|'themes'|);
** var paste = readFromClipboard();
** loadURI(paste);    //load URI in current tab
** gBrowser.addTab(paste);  //load URI in new tab
** goDoCommand(cmd)
   goDoCommand('cmd_scrollLineUp');
   goDoCommand('cmd_scrollLineDown');
   goDoCommand('cmd_scrollPageUp');
   goDoCommand('cmd_scrollPageDown');
   and so on. see
   /home/sylecn/fromsource/Firemacs/chrome/content/keybinding.js for more
   example commands.
* built-in objects, and code snippet in browser.xul overlay context
  in alphabetic order
** Application ?
** Components
Components.utils.import()
//import a js module to given namespace.
let MyExtension = {};
Components.utils.import("resource://myextension/modules/SomeModule.js", MyExtension);

Components.utils.reportError()
** content == window.content
   content.getSelection();
** document // the browser XUL
   document.commandDispatcher.focusedWindow.getSelection().toString();
** gBrowser
   gBrowser.addEventListener("load", onPageLoad, true);

   //Disable JS in the currently active tab
   gBrowser.docShell.allowJavascript = false;

   gBrowser.loadURI('http://www.mozilla.org/');
   // next tab
   gBrowser.mTabContainer.advanceSelectedTab(1);  //-1 to select previous tab
   gBrowser.reloadAllTabs();
   var tab = gBrowser.mCurrentTab;
   gBrowser.removeTab(tab);
   
** window
   window.getBrowserSelection() == window.content.getSelection()

   window.addEventListener("load", function(e) { onWindowLoad(e); }, false);
   window.addEventListener('fullscreen', function(){
       alert('fullscreen mode on or off')
   }, false)

   window.location.href ?
** XMLHttpRequest, ajax calls
   https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Example.3a.c2.a0Non-HTTP_synchronous_request
   // Getting a webpage's source code
   function getSource(filename) {
       var req = new XMLHttpRequest();
       req.open('GET', filename, false); 
       req.send(null);
       if (req.status == 200) {    //or 0 if loading from file or ftp.
         return req.responseText;
       }
       return null;
   }
** 

* useful XPCOM interface

** see also the Service JS Module in firefox 4, easier access to XPCOM
https://developer.mozilla.org/en/JavaScript_code_modules/Services.jsm
myaddon = {};
Components.utils.import("resource://gre/modules/Services.jsm", myaddon);
myaddon.prefsService = myaddon.Services.prefs;

# service accessor
console
io
locale
prefs
prompt    //alert(), confirm(), prompt()
scriptloader
search    //add search engines in the search box. not search on current page.
storage
strings

** read/write text file
   https://developer.mozilla.org/en/Reading_textual_data
   https://developer.mozilla.org/en/Writing_textual_data
*** nsIConverterInputStream
var charset = "UTF-8";
const replacementChar = Components.interfaces.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER;
var is = Components.classes["@mozilla.org/intl/converter-input-stream;1"]
                   .createInstance(Components.interfaces.nsIConverterInputStream);
is.init(fis, charset, 1024, replacementChar);

// now input stream is is ready.

var str = {};
var numChars = is.readString(4096, str);
if (numChars != 0 /* EOF */)
var read_string = str.value;

is.close();

// Note that you may get less characters than you asked for, especially (but
// not only) at the end of the file (stream).

*** nsIConverterOutputStream
var charset = "UTF-8"; // Can be any character encoding name that Mozilla supports

var os = Components.classes["@mozilla.org/intl/converter-output-stream;1"]
                   .createInstance(Components.interfaces.nsIConverterOutputStream);

// This assumes that fos is the Interface("nsIOutputStream") you want to write to
os.init(fos, charset, 0, 0x0000);

os.writeString("Umlaute: \u00FC \u00E4\n");
os.writeString("Hebrew:  \u05D0 \u05D1\n");
// etc.

os.close();

** nsIRandomGenerator
Generating Random Bytes

const NOB = 128; // number of bytes
var buffer = '';
var prng = Components.classes['@mozilla.org/security/random-generator;1'];
var bytebucket =  prng.getService(Components.interfaces.nsIRandomGenerator).generateRandomBytes(NOB, buffer);

** nsIPasswordManager

** nsIPrefBranch2
allows clients to observe changes to preference values.

** nsIPrefBranch
This interface is used to manipulate the preferences data. This object may be
obtained from the preferences service ( nsIPrefService ) and used to get and
set default and/or user preferences across the application.

getIntPref(pref)
setIntPref(pref, value)
setBoolPref
getBoolPref

** nsIPrefService
This interface is the main entry point into the back end preferences
management library. The preference service is directly responsible for the
management of the preferences files and also facilitates access to the
preference branch object which allows the direct manipulation of the
preferences themselves.

getBranch(aPrefRoot);

** nsIIOService
** nsIResProtocolHandler
** nsILocalFile
*** Programmatically adding aliases
    create resource:// for javascript module file.
    resource://<alias>/<relative-path>/<file.js|jsm>

var ioService = Components.classes["@mozilla.org/network/io-service;1"]
                          .getService(Components.interfaces.nsIIOService);
var resProt = ioService.getProtocolHandler("resource")
                       .QueryInterface(Components.interfaces.nsIResProtocolHandler);

var aliasFile = Components.classes["@mozilla.org/file/local;1"]
                          .createInstance(Components.interfaces.nsILocalFile);
aliasFile.initWithPath("/some/absolute/path");

var aliasURI = ioService.newFileURI(aliasFile);
resProt.setSubstitution("myalias", aliasURI);

// assuming the code modules are in the alias folder itself

** 
