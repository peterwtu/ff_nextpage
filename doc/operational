Date: 2012-07-20
Time-stamp: <2012-08-02>

* 2012-07-31 support user binding config file
  the config file could be a plain file or an encoded firefox preferences
  entry. I prefers a persistent text file as config file. But I know some
  windows users would rather not.

  - DONE how to get user's home dir?
    see https://developer-new.mozilla.org/en-US/docs/Code_snippets/File_I_O
    use built-in FileUtils js module.
  - DONE how to read the file. use NetUtil module.
  - how to parse the file
  - provide a button to reload config file.
    which means current config should be flushed and updated.

** 2012-08-02 design the thing
   - add config file based key binding system.
     - parse config file, produce json
       nextpage.config.keybindings = []
       same as the old nextpage.binding dict.

     - in key event, process defined hotkeys
   - create a default config file on add-on init.
     if config file is found, do not overwrite it.
   - add a label to show config file path.
     add a button to copy config file path.
   - add a button to reload config file.
   - remove preferences based binding completely.
   - allow temperately disable a keybinding.
     by adding a text widget. (serves as a simple text editor)
     save button and reload button.
** define the config file format
   #+BEGIN_SRC emacs-lisp
     ;; use emacs style key name.
     ;;   C-a means Ctrl-a
     ;;   M-a means Alt-a
     ;;   C-M-a means Ctrl-Alt-a
     ;; 
     ;; to known a key or key sequence's name, start emacs and type C-h c, then
     ;; type your key sequence.
     (bind "b" 'history-back)
     (bind "c" 'close-tab)
     (bind "SPC" 'nextpage-maybe)
     (bind "n" 'nextpage)
     (bind "p" 'history-back)
   #+END_SRC
** define the preferences UI
   config file: [/home/sylecn/.config/nextpage.conf] [copy]
   [a big text area here]
   [reload from disk] [check] [save to disk]

   when user press reload, reload config file from disk to text area widget.
   press check will check the config in text area. either tell
   "looks good." or "line 5: ignore bind with unkown command foobar." or
   "line 6: overwrite existing binding (key, foobar)."

* 2012-07-20 create a universal key binding add-on for firefox. :complicated:
  Why:

  The freedom to add or modify key bindings should be given to the user.
  Ideally developers just write functions (user commands) and recommend a
  default key binding. Users should be able bind/unbind whichever function as
  they wish.

  Firefox is pretty bad at this.
  That's why there is Firemacs, Vimperator, vimkeybindings, many gesture based
  add-ons, all creating their own way of doing things. There is no portability
  and code reuse.

  This universal key binding add-on aims to solve this problem by creating a
  framework that all add-on developers can use. Users will be able to bind
  arbitrary keys to built-in and external functions.

** 2012-07-20 pre-condition
   - Make sure one add-on can call functions defined in another add-on.
     Firefox add-on namespace problem.

** 2012-07-20 structure
   This add-on:
   - read key binding configuration, and check commands exists in the system.
     later key bindings overwrite earlier.
   - create key bindings on the fly.
   - be able to get command declaration files.
   - be able to get recommended (default) key bindings for some add-on.
   - be able to get key binding profile that user can create and share.
   - user can store their config file on the cloud. (add-on provide this
     service for free.) or on their profile dir or even their home dir.

     For example, firefox provide different default keybindings on Windows,
     Linux and Mac, those three can be made into profile. User can get
     universal key bindings if they wish.
   - 
