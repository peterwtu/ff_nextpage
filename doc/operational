Date: 2012-07-20
Time-stamp: <2012-08-22>

* later								      :entry:
** 2012-08-22 add lisp parser.
*** support more commands and configurable vars.
    ignoreBindingAList
    nextPattern
*** more complicated one, it's a hook.
    var preGeneric = [
    [/\/((thread|forum)-|(viewthread|forumdisplay)\.php)/i, this.getLinkForDiscuz],
    [/^http:\/\/osdir\.com\/ml\//i, this.getLinkForOsdirML],
    [/^http:\/\/coding\.derkeiler\.com\/Archive\//i, this.getLinkForDerkeilerML],
    [/\.wikisource\.org\//i, this.getLinkForWikiSource],
    [/^http:\/\/www\.baidu\.com\/s\?wd=/i, this.getLinkForBaiduSearch]
    ];

    Well, the ultimate is just built a lisp API and interpreter for the
    firefox add-on. If I can write the preGeneric functions in lisp, then I
    can almost do anything.
*** support functions, variables
    the config file will be much more powerful when user can define functions.
    I just export all built-in firefox function to be usable in lisp config
    file, then user can create anything they want.

    I would also like to implement closures, so user can have states.

** 2012-08-22 support show-downloads command.
** 2012-08-22 support undo-close-tab command.
** 2012-08-18 file io need to get more detailed error message.
   I can't find any document for the XPCOM return value's text representation.

   In all example code, 

       Components.isSuccessCode(status)

   is used to tell whether a async call is successful, but when it is not, how
   to get an error message?

   - update config.js when I know how to do this.
** 2012-07-20 create a universal key binding add-on for firefox. :complicated:
   Why:

   The freedom to add or modify key bindings should be given to the user.
   Ideally developers just write functions (user commands) and recommend a
   default key binding. Users should be able bind/unbind whichever function as
   they wish.

   Firefox is pretty bad at this.
   That's why there is Firemacs, Vimperator, vimkeybindings, many gesture based
   add-ons, all creating their own way of doing things. There is no portability
   and code reuse.

   This universal key binding add-on aims to solve this problem by creating a
   framework that all add-on developers can use. Users will be able to bind
   arbitrary keys to built-in and external functions.

*** 2012-07-20 pre-condition
    - Make sure one add-on can call functions defined in another add-on.
      Firefox add-on namespace problem.

*** 2012-07-20 structure
    This add-on:
    - read key binding configuration, and check commands exists in the system.
      later key bindings overwrite earlier.
    - create key bindings on the fly.
    - be able to get command declaration files.
    - be able to get recommended (default) key bindings for some add-on.
    - be able to get key binding profile that user can create and share.
    - user can store their config file on the cloud. (add-on provide this
      service for free.) or on their profile dir or even their home dir.

      For example, firefox provide different default keybindings on Windows,
      Linux and Mac, those three can be made into profile. User can get
      universal key bindings if they wish.

** 2012-08-19 make nextpage a restart-less add-on.
   It should be easy given that my program is quite organized, overlay on GUI
   is quit minimum.
** 2012-08-22 add unbind command.				      :maybe:
   which works just like bind something to nil.
   a pair of key nil will be added in the bindings obj. semantics are the same
   as (bind key nil).
** 2012-08-22 really write a sexp parser in js
   currently to support nil, I make the quote char optional in bind_pattern
   regexp.
** 2012-08-22 use platform convention for config file path.	      :maybe:
   on linux: ~/.config/nextpage.lisp
   on windows: My Document/nextpage.lisp
   on Mac: ?
** 2012-08-22 implement key-chains					:low:
   so I can bind C-c ! h etc. this is for future use beyond nextpage.

* current							      :entry:
** 2012-08-19 grep for TODOs and 'log(' before commit
** 2012-08-22 if preferences window is already open, just switch to it.
   do not start a new preferences window.

   User could be confused if they edit code in one window, and hit save button
   in another.

   I guess could do this in init function.

*** update usage.html nextpage_show_preferences function. maybe.
    never show to preferences window to user.
** 
** 2012-08-22 if ~/.config does not exists. Do I need to call
   config.create_config_file before calling config.write_config_file?
** 2012-08-19 check config errors before saving to disk.
   show errors to user.
** 2012-07-31 support user binding config file
   the config file could be a plain file or an encoded firefox preferences
   entry. I prefers a persistent text file as config file. But I know some
   windows users would rather not.

   - DONE how to get user's home dir?
     see https://developer-new.mozilla.org/en-US/docs/Code_snippets/File_I_O
     use built-in FileUtils js module.
   - DONE how to read the file. use NetUtil module.
   - DONE how to parse the file
     parse line by line, use regexp to do toy parsing.
   - DONE provide a button to reload config file.
     which means current config should be flushed and updated.

*** 2012-08-02 design the thing (continued)
    - create a default config file on add-on init.
      if config file is found, do not overwrite it.
      To create the file, you need to create all parent dirs.

    - DONE add a label to show config file path.
      DONE add a button to copy config file path.

    - DONE add a button to reload config file.
    - DONE allow temperately disable a keybinding.
      by adding a text widget. (serves as a simple text editor)
      save button and reload button.

*** define the config file format
    #+BEGIN_SRC emacs-lisp
      ;; use emacs style key name.
      ;;   C-a means Ctrl-a
      ;;   M-a means Alt-a
      ;;   C-M-a means Ctrl-Alt-a
      ;; 
      ;; to known a key or key sequence's name, start emacs and type C-h c, then
      ;; type your key sequence.
      (bind "b" 'history-back)
      (bind "c" 'close-tab)
      (bind "SPC" 'nextpage-maybe)
      (bind "n" 'nextpage)
      (bind "p" 'history-back)
    #+END_SRC

*** define the preferences UI
    config file: [/home/sylecn/.config/nextpage.conf] [copy]
    [a big text area here]
    [save & load] [reload only]

    when user press save & load, check the config in text area widget for
    errors. if it is good, tell user "looks good.", save it to disk, tell
    overlay to reload it. if there are some warnings, tell user, for example,
        "line 6: overwrite earlier binding (key, foobar)."
    still save and reload.
    if there are errors, tell user and do not save and reload.

    example error message:
        line X: unknown command: foo
	line Y: bind: invalid key: foo.
	line Y: bind: invalid command: foobar.
